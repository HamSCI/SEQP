from collections import OrderedDict
import pandas as pd
import tqdm

from .data import clean_call

def get_df(csv_file,qth_locator=None):
    """
    Reads a DXCluster CSV generated by generate_seqp_csv() into a
    pandas dataframe that has been cleaned and formatted for science
    analysis.
    """
    print('Getting DXCluster dataframe...')
    df  = dxcl_csv_to_df(csv_file)
    df['grid_src_0']            = 'dxcl'
    df['grid_src_1']            = 'dxcl'
    df['mode']                  = 'None'
    df['srpt_0']                = None

    keys = OrderedDict()
    keys['occurred']            = 'datetime'
    keys['freq']                = 'frequency'
    keys['mode']                = 'mode'
    keys['call_0']              = 'call_0'
    keys['rx_grid']             = 'grid_0'
    keys['grid_src_0']          = 'grid_src_0'
    keys['srpt_0']              = 'srpt_0'
    keys['call_1']              = 'call_1'
    keys['tx_grid']             = 'grid_1'
    keys['grid_src_1']          = 'grid_src_1'

    kys = [x for x in keys.keys()]
    df  = df[kys]
    df  = df.rename(columns=keys)

    for key in ['call_0','call_1']:
        df[key] = df[key].apply(clean_call)

    
    if qth_locator is not None:
        tqdm.tqdm.pandas(tqdm.tqdm,leave=True)
        print('Geolocating DXCluster dataframe...')
        for key in [0,1]:
            grid_k      = 'grid_{!s}'.format(key)
            grid_src_k  = 'grid_src_{!s}'.format(key)
            call_k      = 'call_{!s}'.format(key)

            print('{} --> {}'.format(call_k,grid_k))

            result              = df[call_k].progress_apply(qth_locator)
            grids, grid_srcs    = zip(*result)

            df[grid_k]          = grids
            df[grid_src_k]      = grid_srcs

    # Set Dataframe to MHz.
    df['frequency'] = df['frequency']/1.e3

    df['source']    = 'dxcluster'

    return df

def dxcl_csv_to_df(csv_file):
    """
    Reads a DXCluster CSV generated by generate_seqp_csv() into a
    pandas dataframe.
    """
    df = pd.read_csv(csv_file,parse_dates=[0])
    return df
